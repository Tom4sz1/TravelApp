// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TravelApp.Data;

namespace TravelApp.Migrations
{
    [DbContext(typeof(CountryContext))]
    [Migration("20220901161418_v2")]
    partial class v2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0");

            modelBuilder.Entity("TravelApp.Models.Continent", b =>
                {
                    b.Property<string>("ContinentId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("ContinentId");

                    b.ToTable("Continent");
                });

            modelBuilder.Entity("TravelApp.Models.Country", b =>
                {
                    b.Property<string>("CountryId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("AccessToTheSea")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ContinentId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<bool>("MountainousTerrain")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<bool>("WoodedArea")
                        .HasColumnType("INTEGER");

                    b.HasKey("CountryId");

                    b.HasIndex("ContinentId");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("TravelApp.Models.Description", b =>
                {
                    b.Property<string>("DescriptionId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Autor")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Data")
                        .HasColumnType("TEXT");

                    b.Property<string>("Descripe")
                        .HasColumnType("TEXT");

                    b.Property<string>("TownID")
                        .HasColumnType("TEXT");

                    b.HasKey("DescriptionId");

                    b.HasIndex("TownID");

                    b.ToTable("Description");
                });

            modelBuilder.Entity("TravelApp.Models.Town", b =>
                {
                    b.Property<string>("TownId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("AccessToSea")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CountryId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("HistoricalPlace")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("MountainousTerrain")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PlaceWithNature")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TownCreator")
                        .HasColumnType("TEXT");

                    b.Property<bool>("WoodedArea")
                        .HasColumnType("INTEGER");

                    b.HasKey("TownId");

                    b.HasIndex("CountryId");

                    b.ToTable("Town");
                });

            modelBuilder.Entity("TravelApp.Models.Country", b =>
                {
                    b.HasOne("TravelApp.Models.Continent", "Continent")
                        .WithMany("Countries")
                        .HasForeignKey("ContinentId");
                });

            modelBuilder.Entity("TravelApp.Models.Description", b =>
                {
                    b.HasOne("TravelApp.Models.Town", null)
                        .WithMany("Descriptions")
                        .HasForeignKey("TownID");
                });

            modelBuilder.Entity("TravelApp.Models.Town", b =>
                {
                    b.HasOne("TravelApp.Models.Country", "Country")
                        .WithMany("Towns")
                        .HasForeignKey("CountryId");
                });
#pragma warning restore 612, 618
        }
    }
}
